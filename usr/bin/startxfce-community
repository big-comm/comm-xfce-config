#!/bin/sh

# Tests if the card is NVIDIA, if so, uses the value of the variables
lspci | grep -qi "vga.*nvidia" && {
   export GSK_RENDERER=cairo
   export GDK_DISABLE=vulkan
   export GDK_GL_DISABLE=buffer-storage
}

# Defining the default visual style to be used in applications that use Qt
[[ -z $QT_STYLE_OVERRIDE ]] && export QT_STYLE_OVERRIDE="kvantum"
[[ -z $QT_QPA_PLATFORMTHEME ]] && export QT_QPA_PLATFORMTHEME="kde"
[[ -z $QT_WAYLAND_DECORATION ]] && export QT_WAYLAND_DECORATION="adwaita"

# Render loop basic if using software render and change GTK4 from vulkan to ngl
if vulkaninfo --summary 2> /dev/null | grep 'deviceName' | grep -vq 'llvmpipe'; then
    unset QSG_RENDER_LOOP
    # Temporarily forcing GTK Renderer GL since 2024/10/11
    [[ -z $GSK_RENDERER ]] && export GSK_RENDERER="vulkan"
else
    export QSG_RENDER_LOOP="basic"
    [[ -z $GSK_RENDERER ]] && export GSK_RENDERER="ngl"
fi

# Check system theme to apply if the QT theme is clade or dark
if [ -f "/usr/share/sync-kde-and-gtk-places/sync-gnome-theme-to-qt.sh" ]; then
    # Tenta executar 3 vezes com intervalo de 1 segundo
    for i in {1..3}; do
        if /usr/share/sync-kde-and-gtk-places/sync-gnome-theme-to-qt.sh; then
            logger "sync-gnome-theme-to-qt.sh executed successfully"
            break
        else
            logger "Failed to execute sync-gnome-theme-to-qt.sh, attempt $i"
            sleep 0.5
        fi
    done
else
    logger "sync-gnome-theme-to-qt.sh not found"
fi

# Force language
if [ "$LANGUAGE" = "" ]; then
    [[ -z $LANGUAGE ]] && export LANGUAGE=$LANG
fi

# Checks if the shell has already been changed
if [ ! -f "$HOME/.biglinux-shell-changed" ]; then
    biglinux-change-default-shell bash-power
    touch "$HOME/.biglinux-shell-changed"
fi

#OBS Studio game capture with vulkan
if [ -e "/usr/bin/obs-vkcapture" ]; then
    [[ -z $OBS_USE_EGL ]] && export OBS_USE_EGL=1
    [[ -z $OBS_VKCAPTURE ]] && export OBS_VKCAPTURE=1
    [[ -z $VK_INSTANCE_LAYERS ]] && export VK_INSTANCE_LAYERS="VK_LAYER_OBS_vkcapture_64:VK_LAYER_VALVE_steam_overlay_64" #Fix MangoHUD overlay
fi

#Keyboard LED
if [ -e "$HOME/.config/ledkeyboard" ]; then
    change-keyboard-led on
fi

# Path to the control file
controlFile="$HOME/.config/Thunar/uca.xml"

# Check if the control file exists
if [ ! -f "$controlFile" ]; then
    # Execute the command if the control file does not exist
    /usr/local/bin/thunar-actions-translated.sh
fi


# --- START Configuration dconf and mimeapps
# Base directories for configurations
dconf_dir="$HOME/.config/dconf"
mimeapps_dir="$HOME/.config"
log_file="/tmp/dconf-switch.log"

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$log_file"
}

# Function to manage mimeapps configuration
switch_mimeapps_config() {
    local desktop_env=$1
    
    log_message "Managing mimeapps for $desktop_env environment"
    
    # Kill any existing mimeapps-watch processes
    if pgrep -f "mimeapps-watch-$desktop_env" > /dev/null; then
        log_message "Killing existing mimeapps watch processes"
        pkill -f "mimeapps-watch-$desktop_env"
        sleep 1
    fi
    
    # Load specific mimeapps configuration
    if [ -f "$mimeapps_dir/$desktop_env.mimeapps.list" ]; then
        log_message "Loading $desktop_env mimeapps configuration"
        cp "$mimeapps_dir/$desktop_env.mimeapps.list" "$mimeapps_dir/mimeapps.list"
    else
        log_message "No specific mimeapps configuration found for $desktop_env"
        # Create empty file if none exists
        touch "$mimeapps_dir/mimeapps.list"
    fi
    
    # Monitor mimeapps changes in a separate process
    (
        log_message "Starting mimeapps monitor for $desktop_env"
        while true; do
            if command -v inotifywait >/dev/null 2>&1; then
                # Use inotifywait if available
                inotifywait -e modify,move,create "$mimeapps_dir/mimeapps.list" 2>/dev/null
            else
                # Fallback to polling every 2 seconds
                sleep 2
            fi
            
            if [ -f "$mimeapps_dir/mimeapps.list" ]; then
                log_message "Mimeapps change detected"
                log_message "Saving to: $mimeapps_dir/$desktop_env.mimeapps.list"
                cp "$mimeapps_dir/mimeapps.list" "$mimeapps_dir/$desktop_env.mimeapps.list.tmp" && \
                mv "$mimeapps_dir/$desktop_env.mimeapps.list.tmp" "$mimeapps_dir/$desktop_env.mimeapps.list"
            fi
        done
    ) &
    echo $! > "/tmp/mimeapps-watch-$desktop_env.pid"
}

# Function to switch dconf configurations between desktop environments
switch_dconf_config() {
    local desktop_env=$1
    
    # Ensure directory exists
    mkdir -p "$dconf_dir"
    
    # Clear old log
    echo "" > "$log_file"
    chmod 666 "$log_file"  # Ensure read/write permissions
    
    # Debug logs
    log_message "Script started"
    log_message "Desktop Environment: $desktop_env"
    log_message "XDG_CURRENT_DESKTOP: $XDG_CURRENT_DESKTOP"
    
    # Kill any existing dconf-watch processes
    if pgrep -f "dconf watch /" > /dev/null; then
        log_message "Killing existing dconf watch processes"
        pkill -f "dconf watch /"
        sleep 1
    fi

    log_message "Detected $desktop_env environment"
    
    # Load latest configuration for the detected desktop environment
    if [ -f "$dconf_dir/settings.$desktop_env" ]; then
        log_message "Loading existing $desktop_env settings"
        dconf reset -f /
        dconf load / < "$dconf_dir/settings.$desktop_env"
    else
        log_message "No existing $desktop_env settings found"
    fi
    
    # Monitor changes in a separate process
    (
        log_message "Starting $desktop_env settings monitor"
        while true; do
            dconf watch / | while read -r change; do
                log_message "Change detected: $change"
                log_message "Saving to: $dconf_dir/settings.$desktop_env"
                dconf dump / > "$dconf_dir/settings.$desktop_env.tmp" && \
                mv "$dconf_dir/settings.$desktop_env.tmp" "$dconf_dir/settings.$desktop_env"
            done
        done
    ) &
    echo $! > "/tmp/dconf-watch.pid"
}

# Detect current desktop environment
detect_desktop_env() {
    if [[ "$XDG_CURRENT_DESKTOP" = *"Cinnamon"* ]] || \
       [[ "$DESKTOP_SESSION" = "cinnamon" ]] || \
       [[ "$XDG_SESSION_DESKTOP" = "cinnamon" ]]; then
        echo "cinnamon"
    elif [[ "$XDG_CURRENT_DESKTOP" = *"GNOME"* ]] || \
         [[ "$DESKTOP_SESSION" = "gnome" ]] || \
         [[ "$XDG_SESSION_DESKTOP" = "gnome" ]]; then
        echo "gnome"
    elif [[ "$XDG_CURRENT_DESKTOP" = *"XFCE"* ]] || \
         [[ "$DESKTOP_SESSION" = "xfce4" ]] || \
         [[ "$DESKTOP_SESSION" = "xfce" ]] || \
         [[ "$XDG_SESSION_DESKTOP" = "xfce" ]]; then
        echo "xfce"
    else
        echo "default"
    fi
}

# Main execution
main() {
    current_desktop=$(detect_desktop_env)
    log_message "Detected desktop: $current_desktop"
    switch_mimeapps_config "$current_desktop"
    switch_dconf_config "$current_desktop"
}

# Run main script
main
# --- END Configuration dconf


### Execute in LiveCD
if [ -e /usr/bin/startbiglive ]; then
    # Get the correct path for the Desktop, regardless of language
    homeBigDesk=$(xdg-user-dir DESKTOP)
    cfile='calamares-biglinux.desktop'

    if [ ! -d "$homeBigDesk" ]; then
        mkdir -p "$homeBigDesk"
    fi

    cp -f /usr/share/applications/$cfile "$homeBigDesk/"
    chmod +x "$homeBigDesk/$cfile"

    # Generate the SHA256sum of the file on each boot
    checksum=$(sha256sum "$homeBigDesk/$cfile" | awk '{print $1}')

    # Set metadata using gio
    gio set "$homeBigDesk/$cfile" metadata::xfce-exe-checksum "$checksum"
    gio set "$homeBigDesk/$cfile" metadata::trusted true

    # Forces the update of user directories without asking
    LANG=$LANG xdg-user-dirs-update --force
    # Disables the prompt about updating directories
    echo "enabled=false" > "$HOME/.config/user-dirs.conf"

    # Remove switch user
    xfconf-query -c xfce4-session -np '/shutdown/ShowSwitchUser' -t 'bool' -s 'false'

    # Disable screen lock
    xfconf-query -c xfce4-screensaver -p /saver/enabled -n -t bool -s false

    # Remove the lock screen button
    xfconf-query -c xfce4-panel -p $(xfconf-query -c xfce4-panel -l | grep show-command-lockscreen) -s false
fi
